{
  "name": "2849496416.GitHub.com",
  "tagline": "test github page",
  "body": "### Welcome to GitHub Pages.\r\nServlet的主要功能：\r\n\r\n创建并返回一个基于客户请求性质的动态内容的完整HTML页面。\r\n创建可嵌入到现在HTML页面中的部分HTML页面（HTML片段）。\r\n与其他服务器资源(包括数据库和基于Java的应用程序)通信。\r\n用多个客户端处理连接，接收多个客户端的输入，并将结果传递到多个客户端，例如:Servlet可以是多参与者的游戏服务器。\r\n当允许在单连接方式下传送数据的情况下，在浏览器上打开服务器至Applet的新连接，并将该连接保持打开状态；当允许客户端和服务器简单且高效的执行会话的情况下，Applet也可以启动客户浏览器和服务器之间的连接，可以通过定制协议来通信。\r\n将定制的处理提供给所有服务器的标准程序，如Servlet可以修改如何认证用户。\r\n-\r\nServlet特点 \r\nServlet技术最大的优势就是可以处理客户端传来的HTTP请求，并返回一个响应。\r\n\r\n高效：在服务器上仅有一个Java虚拟机在运行，其优势在于当多个来自客户端的请求访问时，Servlet为每个请求分配一个线程，而不是进程。\r\n方便：Servlet提供了大量的使用工具例程，如：处理很难完成的HTML表单数据、读取和设置HTTP头，以及处理Cookie和跟踪会话。\r\n跨平台：Servlet用Java编写。\r\n功能强大：Servlet可以直接与web服务器交互，还能再各个程序间共享数据，使得数据库连接池之类的功能很容易实现。\r\n灵活性和可扩展性\r\n共享数据\r\n安全\r\nServlet的生命周期 \r\nServlet部署在容器里，生命周期由容器管理。 \r\n1）当用户请求Servlet服务时或启动web服务器时，容器环境加载一个Java Servlet类。 \r\n2）容器环境将根据用户请求创建一个或者多个Servlet对象实例，并将这些实例加入到Servlet实例池中。 \r\n3）容器环境调用Servlet的初始化方法HttpServlet.init(ServletConfig config)完成初始化，这是需要传递参数，其中包含初始化参数和容器环境的信息，并负责向Servlet传递数据。如果传递失败，则会抛出ServletException异常，Servlet将不能正常工作。 \r\n4）容器环境利用一个HttpServletRequest和HttpServletResponse对象封装从Web容器接收到的HTTP请求和有Servlet生成的响应。 \r\n5）环境容量把HttpServletRequest和HttpServletResponse对象传递给HttpServlet.service()方法，service()可被多次调用，各调用过程在不同的线程，互不干扰。 \r\n6）定制的Java Servlet从HttpServletRequest对象读取HTTP请求数据，访问来自HTTPSession或Cookie对象的状态信息，执行特定应用的处理并且用HttpServletResponse对象生成HTTP响应数据。 \r\n7）当web服务器和容器关闭时会自动调用HttpServlet.destroy()方法关闭所有打开的资源。",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}